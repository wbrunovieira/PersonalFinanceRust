{
  "version": 3,
  "sources": ["../../../../encore.gen/internal/entrypoints/combined/main.ts", "../../../../url/url.ts", "../../../../url/encore.service.ts"],
  "sourcesContent": ["import { registerGateways, registerHandlers, run, type Handler } from \"encore.dev/internal/codegen/appinit\";\n\nimport { shorten as url_shortenImpl0 } from \"../../../../url/url\";\nimport { get as url_getImpl1 } from \"../../../../url/url\";\nimport { list as url_listImpl2 } from \"../../../../url/url\";\nimport * as url_service from \"../../../../url/encore.service\";\n\nconst gateways: any[] = [\n];\n\nconst handlers: Handler[] = [\n    {\n        apiRoute: {\n            service:           \"url\",\n            name:              \"shorten\",\n            handler:           url_shortenImpl0,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"auth\":false,\"expose\":true,\"isRaw\":false,\"isStream\":false},\n        middlewares: url_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"url\",\n            name:              \"get\",\n            handler:           url_getImpl1,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"auth\":false,\"expose\":true,\"isRaw\":false,\"isStream\":false},\n        middlewares: url_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"url\",\n            name:              \"list\",\n            handler:           url_listImpl2,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"auth\":false,\"expose\":false,\"isRaw\":false,\"isStream\":false},\n        middlewares: url_service.default.cfg.middlewares || [],\n    },\n];\n\nregisterGateways(gateways);\nregisterHandlers(handlers);\n\nawait run();\n", "import { api, APIError } from \"encore.dev/api\";\nimport { SQLDatabase } from \"encore.dev/storage/sqldb\";\nimport { randomBytes } from \"node:crypto\";\n\nconst db = new SQLDatabase(\"url\", { migrations: \"./migrations\" });\n\ninterface URL {\n  id: string; // short-form URL id\n  url: string; // complete URL, in long form\n}\n\ninterface ShortenParams {\n  url: string; // the URL to shorten\n}\n\n// shorten shortens a URL.\nexport const shorten = api(\n  { expose: true, auth: false, method: \"POST\", path: \"/url\" },\n  async ({ url }: ShortenParams): Promise<URL> => {\n    const id = randomBytes(6).toString(\"base64url\");\n    await db.exec`\n        INSERT INTO url (id, original_url)\n        VALUES (${id}, ${url})\n    `;\n    return { id, url };\n  }\n);\n\n// Get retrieves the original URL for the id.\nexport const get = api(\n  { expose: true, auth: false, method: \"GET\", path: \"/url/:id\" },\n  async ({ id }: { id: string }): Promise<URL> => {\n    const row = await db.queryRow`\n        SELECT original_url FROM url WHERE id = ${id}\n    `;\n    if (!row) throw APIError.notFound(\"url not found\");\n    return { id, url: row.original_url };\n  }\n);\n\ninterface ListResponse {\n  urls: URL[];\n}\n\n// List retrieves all URLs.\nexport const list = api(\n  { expose: false, method: \"GET\", path: \"/url\" },\n  async (): Promise<ListResponse> => {\n    const rows = db.query`\n        SELECT id, original_url\n        FROM url\n    `;\n    const urls: URL[] = [];\n    for await (const row of rows) {\n      urls.push({ id: row.id, url: row.original_url });\n    }\n    return { urls };\n  }\n);\n", "import { Service } from \"encore.dev/service\";\n\n// Encore will consider this directory and all its subdirectories as part of the \"url\" service.\n// https://encore.dev/docs/ts/primitives/services\nexport default new Service(\"url\");\n"],
  "mappings": ";;;;;AAAA,SAAS,kBAAkB,kBAAkB,WAAyB;;;ACAtE,SAAS,KAAK,gBAAgB;AAC9B,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAE5B,IAAM,KAAK,IAAI,YAAY,OAAO,EAAE,YAAY,eAAe,CAAC;AAYzD,IAAM,UAAU;AAAA,EACrB,EAAE,QAAQ,MAAM,MAAM,OAAO,QAAQ,QAAQ,MAAM,OAAO;AAAA,EAC1D,OAAO,EAAE,IAAI,MAAmC;AAC9C,UAAM,KAAK,YAAY,CAAC,EAAE,SAAS,WAAW;AAC9C,UAAM,GAAG;AAAA;AAAA,kBAEK,EAAE,KAAK,GAAG;AAAA;AAExB,WAAO,EAAE,IAAI,IAAI;AAAA,EACnB;AACF;AAGO,IAAM,MAAM;AAAA,EACjB,EAAE,QAAQ,MAAM,MAAM,OAAO,QAAQ,OAAO,MAAM,WAAW;AAAA,EAC7D,OAAO,EAAE,GAAG,MAAoC;AAC9C,UAAM,MAAM,MAAM,GAAG;AAAA,kDACyB,EAAE;AAAA;AAEhD,QAAI,CAAC;AAAK,YAAM,SAAS,SAAS,eAAe;AACjD,WAAO,EAAE,IAAI,KAAK,IAAI,aAAa;AAAA,EACrC;AACF;AAOO,IAAM,OAAO;AAAA,EAClB,EAAE,QAAQ,OAAO,QAAQ,OAAO,MAAM,OAAO;AAAA,EAC7C,YAAmC;AACjC,UAAM,OAAO,GAAG;AAAA;AAAA;AAAA;AAIhB,UAAM,OAAc,CAAC;AACrB,qBAAiB,OAAO,MAAM;AAC5B,WAAK,KAAK,EAAE,IAAI,IAAI,IAAI,KAAK,IAAI,aAAa,CAAC;AAAA,IACjD;AACA,WAAO,EAAE,KAAK;AAAA,EAChB;AACF;;;AC1DA,SAAS,eAAe;AAIxB,IAAO,yBAAQ,IAAI,QAAQ,KAAK;;;AFGhC,IAAM,WAAkB,CACxB;AAEA,IAAM,WAAsB;AAAA,EACxB;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,QAAO,OAAM,UAAS,MAAK,SAAQ,OAAM,YAAW,MAAK;AAAA,IAC3E,aAAyB,uBAAQ,IAAI,eAAe,CAAC;AAAA,EACzD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,QAAO,OAAM,UAAS,MAAK,SAAQ,OAAM,YAAW,MAAK;AAAA,IAC3E,aAAyB,uBAAQ,IAAI,eAAe,CAAC;AAAA,EACzD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,QAAO,OAAM,UAAS,OAAM,SAAQ,OAAM,YAAW,MAAK;AAAA,IAC5E,aAAyB,uBAAQ,IAAI,eAAe,CAAC;AAAA,EACzD;AACJ;AAEA,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AAEzB,MAAM,IAAI;",
  "names": []
}
